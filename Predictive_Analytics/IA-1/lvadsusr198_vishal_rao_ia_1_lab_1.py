# -*- coding: utf-8 -*-
"""LVADSUSR198 Vishal Rao IA-1  Lab-1

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WAa8aukm1CErseS9M3D5DJ8K5bn-Exw9
"""

import pandas as pd
import numpy as np

import matplotlib.pyplot as plt
import seaborn as sns
import statsmodels.api as sm
from scipy import stats

from sklearn.preprocessing import MinMaxScaler,StandardScaler,LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression

from sklearn.metrics import r2_score,mean_squared_error

df= pd.read_csv('/content/expenses.csv')

df

df.isna().sum()

##filling the missingf value s

df['bmi'] = df['bmi'].fillna(df['bmi'].mean())

df.isna().sum()

df['bmi'].value_counts().plot(kind = 'bar')

sns.boxplot(df['age'])


# lbl_enc = LabelEncoder()
# ex_data['sex'] = lbl_enc.fit_transform(ex_data['sex'])
# ex_data['smoker'] = lbl_enc.fit_transform(ex_data['smoker'])
# ex_data['region'] = lbl_enc.fit_transform(ex_data['region'])

sns.boxplot(df['bmi'])

sns.boxplot(df['charges'])

num_df = df.select_dtypes(include=np.number)
num_df



print(df[df['charges']>40000].count())

#Removing Outliers
def remove_outliers(A, threshold):
  return df[A<threshold]


df = remove_outliers(df['charges'],40000)
df = remove_outliers(df['bmi'],45)

## encoding
lbl_enc = LabelEncoder()
df['sex'] = lbl_enc.fit_transform(df['sex'])
df['smoker'] = lbl_enc.fit_transform(df['smoker'])
df['region'] = lbl_enc.fit_transform(df['region'])

# df = df.drop('charges',axis = 1)

X = df.drop('charges',axis=1)
y = df['charges']
X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.3,random_state=30)

df.corr()

X_Train, X_test , Y_train , Y_test = train_test_split(X,y,train_size = 0.7)

##Scaling
scale = MinMaxScaler()
scale.fit(X_train)
x_scaled = scale.fit_transform(X_Train)

x_test_s= scale.fit_transform(X_test)

regressor = LinearRegression()

trained_model = regressor.fit(x_scaled,Y_train)

y_pred = trained_model.predict(x_test_s)

#Evaluation
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

mse = mean_squared_error(y_test,y_pred)
rmse = np.sqrt(mse)
r2 = r2_score(y_test,y_pred)

print('MSE: ',mse)
print('RMSE: ',rmse)
print('R-Squared: ',r2)